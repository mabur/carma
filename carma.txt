                ┌─────────────┐                                ┌─────┐
                │    Range    │                                │Table│
                └──────┬──────┘                                └─────┘
      ┌────────────────┼────────────────┬────────────┐                
      ▼                ▼                ▼            ▼                
┌──────────┐    ┌─────────────┐    ┌────────┐    ┌────────┐           
│StringView│    │Dynamic Array│    │2D Array│    │3D Array│           
└──────────┘    └──────┬──────┘    └────────┘    └────────┘           
                       ▼                                              
                ┌─────────────┐                                       
                │StringBuilder│                                       
                └─────────────┘                                       
* Arrays  
  - array2d, array3d
  - look_up_xy, look_up_xyz, at_xy, at_xyz
* For erase and insert allow both:
  - ERASE* for dynamic arrays and DROP* for ranges.
  - ERASE_FRONT O(n)
  - PREPEND/INSERT_FRONT O(n)
  - ERASE_BACK O(1)
  - APPEND/INSERT_BACK/INSERT O(1)
  - ERASE_INDEX O(1)
  - Unordered INSERT_INDEX does not make sense, since it is like APPEND, so no index required.
  - ERASE_INDEX_ORDERED O(n)
  - INSERT_INDEX (ORDERED) O(n)
  - ERASE_RANGE O(m), when would this be useful?
  - ERASE_RANGE_ORDERED O(n+m), like cut selection. Missing
  - ERASE_ITEM, like remove inf. Missing
  - ERASE_ITEM_ORDERED, like remove spaces. Missing
  - ERASE_IF O(1)
  - ERASE_IF_ORDERED O(n), like remove white space. Missing
  - CONCAT (BACK), APPEND_RANGE O(m)
  - CONCAT_FRONT, PREPEND_RANGE O(n+m). Missing
  - CONCAT_INSERT, INSERT_RANGE O(n+m), like paste selection. Missing
  - COPY
  - SHIFT, LEFT, RIGHT
  - Swap is good when we don't care about the order, and shift when we do like for strings.
  - ROTATE, could help implementing the shifts
    - Rotate seems to be the correct term rather than shift.
* Describe Taxonomy
  - Range
    - Array2d, Array3d
    - StringView
    - Dynamic array
      - StringBuilder
  - Table
* Strict warnings
* Naming conflicts for macros that introduce local variables, that could be the same as a user variable.
  - Related to shadowing warnings. So good that the user can get warning when this happens.
  - Could circumvent by using less generic names for local variable inside macros.
* Simulate closures, by having extra parameters.
* Json
* Csv
* Compare arrays and slices in Golang:
  - "An array has a fixed size."
  - "A slice, on the other hand, is a dynamically-sized, flexible view into the elements of an array."
  - "In practice, slices are much more common than arrays."
* Memory handling
  - Some memory can be allocated once and freed when the program exits.
  - Some memory can be allocated once and then grow/append as needed during run-time, and then freed when the program exits.
  - Some memory can be allocated as static variable inside function, and shared for all calls to the functions, and freed when the program exits.
  - Some memory can be allocated for a game interval, like a frame or a scene, and then deallocated/cleared after that frame or scene.
  - Some memory can be allocated on the stack using alloca (C&C++) or VLA (C). At least arrays up to ~1000 primitives.
  - What common cases are left?
* Similar libraries:
  - github.com/nothings/stb/blob/master/stb_ds.h
  - github.com/stclib/STC
  - github.com/mickjc750/str
  - github.com/chrizbazley/strb_t
  - gustedt.gitlabpages.inria.fr/ellipsis/structellipsis__str8.html
* Logo. Elephant and/or Sanskrit letter Ca
* Use for-macro-trick for scope-based resource handling for files, memory, ...
* Associative table
  - Jonathan Blow
    - https://pastebin.com/xMUQXshn
    - Have occupancy byte that stores both: occupancy and part of the hash
  - Tsoding hash table in C:
    - https://www.youtube.com/watch?v=n-S9DBwPGTo
  - CppCon 2017: Matt Kulukundis “Designing a Fast, Efficient, Cache-friendly Hash Table, Step by Step”
    - Google SwissTable
    - https://www.youtube.com/watch?v=ncHmEUmJZf4
    - Have occupancy byte that stores both: occupancy, deleted, part of the hash.
  - Add table versions of?:
    FOR_MIN_TABLE, FOR_MAX_TABLE,
    FILL_TABLE, ERASE_KEY, ERASE_IF_TABLE, CONCAT_TABLE
    COUNT_TABLE? IS_EMPTY_TABLE? ARE_EQUAL_TABLE?
  - Would it be meaningful to re-use to share the implementation for some of them?
* Describe range concepts as:
  - Fixed Ranges, that cannot change size, for example image.
  - Dynamic Arrays, that can shrink or grow at the end.
  - Ranges that can shrink at the beginning.
  - Ranges that can shrink at the end.
  - What is the right representation? Tree, Graph, something more modular? A binary periodic table over all abstract stuctures and macros?
  - Describe as tree or graph or modular concepts. A child is a parent, but not the other way around.
    - Range (for loops)
      - Directional Range / (has front and back etc)
        - Front Shrinkable Range
        - Back Shrinkable Range
          - Dynamic Array
      - Image
    - Table
* Translate arralg to carma


From Falco Girgis:
// alloca()
#ifndef GBL_ALLOCA
//#   ifndef alloca
#       if defined(__APPLE__) || defined(__GLIBC__) || defined(__sun) || defined(__CYGWIN__) || defined(__EMSCRIPTEN__) || defined(VITA) || defined(__DREAMCAST__) || defined(PSP)
#           include <alloca.h>     // alloca
#       elif defined(_WIN32)
#           include <malloc.h>     // alloca
#           ifndef alloca
#               define alloca _alloca  // for clang with MS Codegen
#           endif
#       else
#           include <stdlib.h>     // alloca
#       endif
//#   endif
#   define GBL_ALLOCA alloca
#endif
